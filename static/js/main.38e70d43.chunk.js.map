{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","App.js","serviceWorker.js","index.js"],"names":["Event","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","events","showDetails","value","_this2","react_default","a","createElement","map","event","className","name","description","onClick","Component","EventList","key","id","src_Event","CitySearch","query","suggestions","handleInputChanged","target","setState","handleItemClicked","type","onChange","item","name_string","App","src_CitySearch","src_EventList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAsCeA,qBAhCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFI,MAAQ,CACNC,OAAS,IARER,EAYbS,YAAc,SAACC,KATbV,EAAKO,MAAM,GAHAP,wEAiBJ,IAAAW,EAAAR,KACP,OACES,EAAAC,EAAAC,cAAA,WACCX,KAAKI,MAAMC,OAAOO,IAAI,SAAAC,GAAK,OAC1BJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,SACZL,EAAAC,EAAAC,cAAA,UAAKE,EAAME,MACXN,EAAAC,EAAAC,cAAA,SAAIE,EAAMG,aACVP,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAKF,gBAA5B,2BAzBUY,cCiBLC,6MAjBbf,MAAQ,CACNC,OAAQ,4EAIR,OACEI,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aACXd,KAAKI,MAAMC,OAAOO,IAAI,SAAAC,GAAK,OAC1BJ,EAAAC,EAAAC,cAAA,MAAIS,IAAKP,EAAMQ,IACbZ,EAAAC,EAAAC,cAACW,EAAD,CAAOT,MAAOA,eAXFK,aCqCTK,6MArCbnB,MAAQ,CACNoB,MAAO,GACPC,YAAa,MAGfC,mBAAqB,SAACb,GACpB,IAAMN,EAAQM,EAAMc,OAAOpB,MAC3BV,EAAK+B,SAAS,CAAEJ,MAAOjB,OAGzBsB,kBAAoB,SAACtB,GACnBV,EAAK+B,SAAS,CAAEJ,MAAOjB,6EAGhB,IAAAC,EAAAR,KACP,OACES,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,SACEmB,KAAK,OACLhB,UAAU,OACVP,MAAOP,KAAKI,MAAMoB,MAClBO,SAAU/B,KAAK0B,qBAEjBjB,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eACXd,KAAKI,MAAMqB,YAAYb,IAAI,SAAAoB,GAAI,OAChCvB,EAAAC,EAAAC,cAAA,MACES,IAAKY,EAAKC,YACVhB,QAAS,kBAAMT,EAAKqB,kBAAkBG,EAAKC,eAC1CD,EAAKC,wBA7BOf,aCcVgB,MAVf,WACE,OACEzB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACwB,EAAD,MACA1B,EAAAC,EAAAC,cAACyB,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.38e70d43.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Modal from 'react-modal';\r\n\r\n\r\n\r\nclass Event extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state={\r\n    };\r\n  }\r\n\r\n  state = {\r\n    events:  [],\r\n\r\n  };\r\n\r\n  showDetails = (value) => {\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      {this.state.events.map(event =>\r\n        <ul className=\"event\">\r\n          <h1>{event.name}</h1>\r\n          <p>{event.description}</p>\r\n          <button onClick={() => this.showDetails()}>Show Details</button>\r\n        </ul>\r\n      )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n\r\n  state = {\r\n    events: [],\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {this.state.events.map(event =>\r\n          <li key={event.id}>\r\n            <Event event={event}/>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n  }\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    this.setState({ query: value });\r\n  }\r\n\r\n  handleItemClicked = (value) => {\r\n    this.setState({ query: value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n        <ul className=\"suggestions\">\r\n          {this.state.suggestions.map(item =>\r\n          <li\r\n            key={item.name_string}\r\n            onClick={() => this.handleItemClicked(item.name_string)}>\r\n            {item.name_string}\r\n          </li>\r\n        )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport Event from './Event';\nimport CitySearch from './CitySearch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySearch />\n      <EventList />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}